// Cách dùng
// 🔹 1. Import mixins vào SCSS component

// Ví dụ trong Header.scss:

// @use "../../styles/variables" as vars;
// @use "../../styles/mixins" as *; // import toàn bộ mixin để gọi trực tiếp

// as vars → gọi biến/hàm từ variables.scss:

// color: vars.color("blue", 500);

// as * → import toàn bộ mixins → gọi trực tiếp:

// @include flex-center;

// 🔹 2. Ví dụ sử dụng từng nhóm
// 📱 Responsive
// .card {
//   font-size: var(--text-sm);

//   @include respond(md) {
//     font-size: var(--text-lg);
//   }

//   @include respond-max(sm) {
//     background: vars.color("gray", 100);
//   }

//   @include respond-between(sm, lg) {
//     border: 1px solid vars.color("gray", 300);
//   }
// }

// 📐 Flex & Grid
// .box {
//   @include flex-center;
// }

// .layout {
//   @include grid(3, vars.space(6));
// }

// .cards {
//   @include grid-auto(200px);
// }

// 📦 Container & Spacing
// .section {
//   @include container;
//   @include section-spacing;
// }

// ✍️ Typography
// .title {
//   @include truncate;
// }

// .desc {
//   @include line-clamp(3);
// }

// .responsive-text {
//   @include fluid-type(
//     map.get(vars.$font-sizes, sm),
//     map.get(vars.$font-sizes, 3xl)
//   );
// }

// 🌟 Visual effects
// .card {
//   @include shadow(lg);
//   @include hover-lift(xl);
// }

// .button {
//   @include transition(background-color);
//   @include focus-visible(vars.color("blue", 500));
// }

// 🎨 Buttons
// .btn {
//   @include button-base(vars.space(2), vars.space(6), lg);
//   background: vars.color("blue", 500);
//   color: vars.$white;

//   &:hover {
//     background: vars.color("blue", 600);
//   }
// }

// 🎛️ Positioning
// .parent {
//   position: relative;

//   .child {
//     @include absolute-center;
//   }

//   .cover {
//     @include cover-parent;
//   }
// }

// 🎚️ Scrollbar
// .scroll-area {
//   height: 300px;
//   overflow-y: auto;
//   @include custom-scrollbar(8px, transparent, vars.color("gray", 400), vars.color("gray", 600));
// }

// 🖨 Print
// .print-logo {
//   @include print-only;
// }

// .navbar {
//   @include print-hidden;
// }

// ============================================
// _mixins.scss — Reusable Sass Mixins
// ============================================
@use "variables" as vars;
@use "sass:map";
@use "sass:math";

// ============================================
// 1. RESPONSIVE BREAKPOINTS
// ============================================
@mixin respond($breakpoint) {
  $size: map.get(vars.$breakpoints, $breakpoint);

  @if $size {
    @media (min-width: $size) {
      @content;
    }
  } @else {
    @warn "Breakpoint '#{$breakpoint}' không tồn tại. Available: #{map.keys(vars.$breakpoints)}";
  }
}

@mixin respond-max($breakpoint) {
  $size: map.get(vars.$breakpoints, $breakpoint);

  @if $size {
    @media (max-width: #{$size - 1px}) {
      @content;
    }
  } @else {
    @warn "Breakpoint '#{$breakpoint}' không tồn tại.";
  }
}

@mixin respond-between($min-bp, $max-bp) {
  $min: map.get(vars.$breakpoints, $min-bp);
  $max: map.get(vars.$breakpoints, $max-bp);

  @if $min and $max {
    @media (min-width: $min) and (max-width: #{$max - 1px}) {
      @content;
    }
  }
}

// ============================================
// 2. FLEXBOX UTILITIES
// ============================================
@mixin flex-center {
  display: flex;
  justify-content: center;
  align-items: center;
}

@mixin flex($direction: row, $wrap: nowrap) {
  display: flex;
  flex-direction: $direction;
  flex-wrap: $wrap;
}

@mixin flex-between {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

@mixin flex-col($gap: vars.space(4)) {
  display: flex;
  flex-direction: column;
  gap: $gap;
}

// ============================================
// 3. GRID UTILITIES
// ============================================
@mixin grid($cols: 1, $gap: vars.space(4)) {
  display: grid;
  grid-template-columns: repeat($cols, 1fr);
  gap: $gap;
}

@mixin grid-auto($min-width: 250px, $gap: vars.space(4)) {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax($min-width, 1fr));
  gap: $gap;
}

// ============================================
// 4. CONTAINER & SPACING
// ============================================
@mixin container($padding-vertical: 1rem, $padding-horizone: 1rem) {
  width: 100%;
  margin-left: auto;
  margin-right: auto;
  padding-left: $padding-horizone;
  padding-right: $padding-horizone;
  padding-top: $padding-vertical;
  padding-bottom: $padding-vertical;

  // vòng qua từng breakpoint để set max-width
  @each $breakpoint, $container-width in vars.$container-max-widths {
    @media (min-width: map.get(vars.$breakpoints, $breakpoint)) {
      max-width: $container-width;
    }
  }
}

@mixin section-spacing($top: vars.space(16), $bottom: vars.space(16)) {
  padding-top: $top;
  padding-bottom: $bottom;
}

// ============================================
// 5. TYPOGRAPHY
// ============================================
@mixin truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin line-clamp($lines: 2) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

@mixin fluid-type(
  $min-size: map.get(vars.$font-sizes, base),
  $max-size: map.get(vars.$font-sizes, 2xl),
  $min-vw: 320px,
  $max-vw: 1200px
) {
  font-size: $min-size;
  @media (min-width: $min-vw) {
    font-size: calc(
      #{$min-size} + (#{math.div(
              math.div($max-size, $max-size * 0 + 1) -
                math.div($min-size, $min-size * 0 + 1),
              math.div($max-vw, $max-vw * 0 + 1) -
                math.div($min-vw, $min-vw * 0 + 1)
            )} * (100vw - #{$min-vw}))
    );
  }
  @media (min-width: $max-vw) {
    font-size: $max-size;
  }
}

// ============================================
// 6. VISUAL EFFECTS
// ============================================
@mixin shadow($level: md) {
  box-shadow: map.get(vars.$shadows, $level);
}

@mixin transition(
  $properties: all,
  $duration: map.get(vars.$transition-duration, base),
  $timing: map.get(vars.$transition-timing, ease-in-out)
) {
  transition: $properties $duration $timing;
}

@mixin hover-lift($shadow: lg) {
  @include transition((transform, box-shadow));

  &:hover {
    transform: translateY(-2px);
    @include shadow($shadow);
  }
}

@mixin focus-visible($color: vars.$color-primary, $offset: 2px) {
  &:focus-visible {
    outline: 2px solid $color;
    outline-offset: $offset;
  }
}

// ============================================
// 7. POSITIONING
// ============================================
@mixin absolute-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@mixin cover-parent {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

@mixin aspect-ratio($width: 16, $height: 9) {
  position: relative;

  &::before {
    content: "";
    display: block;
    padding-top: math.percentage(math.div($height, $width));
  }

  > * {
    @include cover-parent;
  }
}

// ============================================
// 8. BUTTONS
// ============================================
@mixin button-reset {
  appearance: none;
  background: none;
  border: none;
  padding: 0;
  margin: 0;
  font: inherit;
  cursor: pointer;

  &:disabled {
    cursor: not-allowed;
    opacity: map.get(vars.$opacity, 60);
  }
}

@mixin button-base(
  $padding-y: vars.space(2),
  $padding-x: vars.space(4),
  $radius: md
) {
  @include button-reset;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: $padding-y $padding-x;
  border-radius: map.get(vars.$border-radius, $radius);
  font-weight: map.get(vars.$font-weights, medium);
  @include transition(all);
  @include focus-visible;

  &:active:not(:disabled) {
    transform: scale(0.98);
  }
}

// ============================================
// 9. VISIBILITY
// ============================================
@mixin sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
}

@mixin focus-trap {
  &:focus {
    outline: none;
  }

  &[aria-hidden="true"] {
    display: none;
  }
}

// ============================================
// 10. SCROLLBAR
// ============================================
@mixin custom-scrollbar(
  $width: 8px,
  $track-color: transparent,
  $thumb-color: vars.color(gray, 400),
  $thumb-hover-color: vars.color(gray, 500)
) {
  &::-webkit-scrollbar {
    width: $width;
    height: $width;
  }

  &::-webkit-scrollbar-track {
    background: $track-color;
  }

  &::-webkit-scrollbar-thumb {
    background: $thumb-color;
    border-radius: $width;

    &:hover {
      background: $thumb-hover-color;
    }
  }

  scrollbar-width: thin;
  scrollbar-color: $thumb-color $track-color;
}

// ============================================
// 11. ANIMATION
// ============================================
@mixin animation(
  $name,
  $duration: map.get(vars.$transition-duration, base),
  $iteration: 1,
  $delay: 0s,
  $timing: map.get(vars.$transition-timing, ease-in-out)
) {
  animation-name: $name;
  animation-duration: $duration;
  animation-iteration-count: $iteration;
  animation-delay: $delay;
  animation-timing-function: $timing;
}

// ============================================
// 12. PRINT
// ============================================
@mixin print-hidden {
  @media print {
    display: none !important;
  }
}

@mixin print-only {
  display: none;

  @media print {
    display: block;
  }
}
