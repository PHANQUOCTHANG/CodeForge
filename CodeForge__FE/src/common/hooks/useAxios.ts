// üåê 2. useAxios

// Ch·ª©c nƒÉng:

// Hook g·ªçi API b·∫±ng axios.

// T·ª± qu·∫£n l√Ω loading, error, data.

// H·ªó tr·ª£ h·ªßy request khi component b·ªã unmount.

// T√°c d·ª•ng:

// Vi·∫øt API call ng·∫Øn g·ªçn, kh√¥ng c·∫ßn try/catch l·∫∑p l·∫°i.

// G·ªçi API v·ªõi axios c√≥ loading, error, data s·∫µn.

// H·ªßy request khi component unmount (tr√°nh memory leak).

// C√≥ th·ªÉ m·ªü r·ªông ƒë·ªÉ auto refresh token.

// D√πng cho fetch user, fetch product list, search API.
// D√πng trong component nh∆∞:

// const { data, loading, error } = useAxios("/users");
import { useState, useEffect } from "react";
import api from "../api/axios"; // file axios setup

export default function useAxios<T = unknown>(
  url: string,
  options: object = {}
) {
  const [data, setData] = useState<T | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<Error | null>(null);

  useEffect(() => {
    let cancel = false;

    const fetchData = async () => {
      try {
        setLoading(true);
        const res = await api.get<T>(url, options);
        if (!cancel) setData(res.data);
      } catch (err) {
        if (!cancel) setError(err as Error);
      } finally {
        if (!cancel) setLoading(false);
      }
    };

    fetchData();

    return () => {
      cancel = true;
    };
  }, [url, options]);

  return { data, loading, error };
}
