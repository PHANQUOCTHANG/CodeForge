using CodeForge.Api.DTOs;
using CodeForge.Core.Interfaces.Services;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using CodeForge.Api.DTOs.Response; // Gi·∫£ ƒë·ªãnh TestCase DTOs n·∫±m ·ªü ƒë√¢y

namespace CodeForge.Api.Controllers
{
    [ApiController]
    [Route("api/[controller]")] // Route: api/testcase
    public class TestCasesController : ControllerBase
    {
        private readonly ITestCaseService _testCaseService;

        public TestCasesController(ITestCaseService testCaseService)
        {
            _testCaseService = testCaseService;
        }


        // --- GET ALL TESTCASES (GET /api/testcase) ---
        // ‚úÖ Endpoint c√¥ng khai ho·∫∑c ƒë∆∞·ª£c b·∫£o v·ªá nh·∫π (tu·ª≥ theo nghi·ªáp v·ª•)
        [HttpGet]
        public async Task<IActionResult> GetAllTestCaseAsync([FromQuery] bool? isHiden)
        {
            // Service tr·∫£ v·ªÅ List<TestCaseDto>
            var result = await _testCaseService.GetAllTestCaseAsync(isHiden);

            // ‚úÖ B·ªçc d·ªØ li·ªáu v√† tr·∫£ v·ªÅ 200 OK
            return Ok(ApiResponse<List<TestCaseDto>>.Success(result, "Test cases retrieved successfully."));
        }

        // --- GET TESTCASE BY ID (GET /api/testcase/{testCaseId}) ---
        // ‚úÖ Th∆∞·ªùng ch·ªâ d√πng cho m·ª•c ƒë√≠ch admin, n√™n b·∫£o v·ªá.
        [Authorize]
        [HttpGet("{id:guid}")] // ‚úÖ Th√™m Route Constraint
        public async Task<IActionResult> GetTestCaseByIdAsync([FromRoute] Guid testCaseId)
        {
            // Service n√©m NotFoundException n·∫øu kh√¥ng t√¨m th·∫•y
            var result = await _testCaseService.GetTestCaseByIdAsync(testCaseId);

            // ‚úÖ B·ªçc d·ªØ li·ªáu v√† tr·∫£ v·ªÅ 200 OK
            return Ok(ApiResponse<TestCaseDto>.Success(result, "Test case retrieved successfully."));
        }

        // --- UPDATE TESTCASE (PATCH /api/testcase/update) ---
        [Authorize] // üõ°Ô∏è Y√™u c·∫ßu Access Token
        [HttpPatch] // ‚úÖ Thay 'update' b·∫±ng endpoint g·ªëc
        public async Task<IActionResult> UpdateTestCaseAsync([FromBody] UpdateTestCaseDto updateTestCaseDto)
        {
            // Service n√©m NotFoundException/ConflictException
            var result = await _testCaseService.UpdateTestCaseAsync(updateTestCaseDto);

            // ‚úÖ Tr·∫£ v·ªÅ 200 OK (Standard for update)
            return Ok(ApiResponse<TestCaseDto>.Success(result, "Test case updated successfully."));
        }

        // --- CREATE TESTCASE (POST /api/testcase) ---
        [Authorize] // üõ°Ô∏è Y√™u c·∫ßu Access Token
        [HttpPost] // ‚úÖ Thay 'create' b·∫±ng endpoint g·ªëc
        public async Task<IActionResult> CreateTestCaseAsync([FromBody] CreateTestCaseDto createTestCaseDto)
        {
            // Service n√©m ConflictException n·∫øu d·ªØ li·ªáu tr√πng l·∫∑p
            var result = await _testCaseService.CreateTestCaseAsync(createTestCaseDto);

            // ‚úÖ Chu·∫©n RESTful: D√πng CreatedAtAction ƒë·ªÉ tr·∫£ v·ªÅ 201 Created
            return CreatedAtAction(
                nameof(GetTestCaseByIdAsync),
                new { testCaseId = result.TestCaseId }, // Gi·∫£ ƒë·ªãnh TestCaseDto c√≥ Id
                ApiResponse<TestCaseDto>.Created(result, "Test case created successfully.")
            );
        }

        // --- DELETE TESTCASE (DELETE /api/testcase/{testCaseId}) ---
        [Authorize] // üõ°Ô∏è Y√™u c·∫ßu Access Token
        [HttpDelete("{id:guid}")] // ‚úÖ ƒê√£ s·ª≠a route th√†nh RESTful
        public async Task<IActionResult> DeleteTestCaseAsync([FromRoute] Guid testCaseId)
        {
            // Service n√©m NotFoundException n·∫øu kh√¥ng t√¨m th·∫•y
            await _testCaseService.DeleteTestCaseAsync(testCaseId);

            // ‚úÖ Chu·∫©n RESTful: D√πng NoContent ƒë·ªÉ tr·∫£ v·ªÅ 204 No Content
            return NoContent();
        }
    }
}