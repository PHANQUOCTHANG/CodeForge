using CodeForge.Api.DTOs;
using CodeForge.Core.Interfaces.Services;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;

namespace CodeForge.Api.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class ProblemsController : ControllerBase
    {
        private readonly IProblemService _problemService;
        private readonly IJudge0Service _judge0Service;

        public ProblemsController(IProblemService problemService, IJudge0Service judge0Service)
        {
            _problemService = problemService;
            _judge0Service = judge0Service;
        }

        // --- GET ALL PROBLEMS (GET /api/problem) ---
        [HttpGet]
        // ‚úÖ C√¥ng khai (Kh√¥ng c·∫ßn token)
        public async Task<IActionResult> GetAllProblemAsync()
        {
            // Service tr·∫£ v·ªÅ List<ProblemDto>
            var result = await _problemService.GetAllProblemAsync();

            // ‚úÖ B·ªçc d·ªØ li·ªáu v√† tr·∫£ v·ªÅ 200 OK
            return Ok(ApiResponse<List<ProblemDto>>.Success(result, "Problems retrieved successfully."));
        }

        // --- GET PROBLEM BY SLUG (GET /api/problem/{slug}) ---
        [HttpGet("{slug}")]
        // ‚úÖ C√¥ng khai (Kh√¥ng c·∫ßn token)
        public async Task<IActionResult> GetProblemBySlugAsync([FromRoute] string slug)
        {
            // Service n√©m NotFoundException n·∫øu kh√¥ng t√¨m th·∫•y
            var result = await _problemService.GetProblemBySlugAsync(slug);

            // ‚úÖ B·ªçc d·ªØ li·ªáu v√† tr·∫£ v·ªÅ 200 OK
            return Ok(ApiResponse<ProblemDto>.Success(result, "Problem retrieved successfully."));
        }

        // --- UPDATE PROBLEM (PATCH /api/problem/update) ---
        [Authorize] // üõ°Ô∏è Y√™u c·∫ßu Access Token
        [HttpPatch("update")]
        public async Task<IActionResult> UpdateProblemAsync([FromBody] UpdateProblemDto updateProblemDto)
        {
            // Service n√©m NotFoundException/ConflictException
            var result = await _problemService.UpdateProblemAsync(updateProblemDto);

            // ‚úÖ Tr·∫£ v·ªÅ 200 OK
            return Ok(ApiResponse<ProblemDto>.Success(result, "Problem updated successfully."));
        }

        // --- CREATE PROBLEM (POST /api/problem/create) ---
        [Authorize] // üõ°Ô∏è Y√™u c·∫ßu Access Token
        [HttpPost("create")]
        public async Task<IActionResult> CreateProblemAsync([FromBody] CreateProblemDto createProblemDto)
        {
            // Service n√©m ConflictException n·∫øu ti√™u ƒë·ªÅ tr√πng
            var result = await _problemService.CreateProblemAsync(createProblemDto);

            // ‚úÖ Chu·∫©n RESTful: Tr·∫£ v·ªÅ 201 Created
            return CreatedAtAction(
                nameof(GetProblemBySlugAsync),
                new { slug = result.Slug }, // Gi·∫£ ƒë·ªãnh ProblemDto c√≥ Slug
                ApiResponse<ProblemDto>.Created(result, "Problem created successfully.")
            );
        }

        // --- DELETE PROBLEM (DELETE /api/problem/{problemId}) ---
        [Authorize] // üõ°Ô∏è Y√™u c·∫ßu Access Token
        [HttpDelete("{id:guid}")] // ‚úÖ ƒê√£ s·ª≠a route th√†nh RESTful
        public async Task<IActionResult> DeleteProblemAsync([FromRoute] Guid problemId)
        {
            // Service n√©m NotFoundException n·∫øu kh√¥ng t√¨m th·∫•y
            await _problemService.DeleteProblemAsync(problemId);

            // ‚úÖ Chu·∫©n RESTful: Tr·∫£ v·ªÅ 204 No Content
            return NoContent();
        }

        // --- RUN CODE (POST /api/problem/run-problem) ---
        [HttpPost("run-problem")]
        // ‚úÖ C√¥ng khai (Ch·∫°y code kh√¥ng c·∫ßn ƒëƒÉng nh·∫≠p) HO·∫∂C [Authorize] n·∫øu b·∫°n mu·ªën h·∫°n ch·∫ø
        public async Task<IActionResult> RunProblemAsync([FromBody] RunProblemDto runProblemDto)
        {
            // Gi·∫£ ƒë·ªãnh RunProblemDto ch·ª©a ƒë·ªß th√¥ng tin cho Judge0
            // Gi·∫£ ƒë·ªãnh service tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng k·∫øt qu·∫£ (v√≠ d·ª•: SubmissionResultDto)
            var result = await _judge0Service.RunAllTestCasesAsync(
                runProblemDto.Language,
                runProblemDto.Code,
                runProblemDto.FunctionName,
                runProblemDto.TestCases
            );

            // Tr·∫£ v·ªÅ 200 OK v·ªõi k·∫øt qu·∫£ bi√™n d·ªãch/ch·∫°y
            return Ok(ApiResponse<object>.Success(result, "Code executed successfully."));
        }
    }
}