using CodeForge.Api.DTOs;
using CodeForge.Api.DTOs.Auth;
using CodeForge.Api.DTOs.Request.Auth;
using CodeForge.Core.Exceptions;
using CodeForge.Core.Interfaces.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;

namespace CodeForge.Api.Controllers
{
    [ApiController]
    [Route("api/[Controller]")]
    public class AuthController : ControllerBase
    {
        private readonly IAuthService _authService;

        public AuthController(IAuthService authService)
        {
            _authService = authService;
        }

        // ============================
        // LOGIN
        // ============================
        [HttpPost("login")]
        public async Task<IActionResult> Login([FromBody] LoginDto loginDto)
        {
            // KH√îNG C·∫¶N try-catch. Global Middleware s·∫Ω b·∫Øt c√°c UnauthorizedException/ConflictException
            var ip = HttpContext.Connection.RemoteIpAddress?.ToString() ?? "unknown";
            var result = await _authService.LoginAsync(loginDto, ip);

            if (!string.IsNullOrEmpty(result.RefreshToken))
                SetRefreshCookie(result.RefreshToken);

            return Ok(ApiResponse<AuthDto>.Success(result, "ƒêƒÉng nh·∫≠p th√†nh c√¥ng"));
        }

        // ============================
        // REGISTER
        // ============================
        [HttpPost("register")]
        public async Task<IActionResult> Register([FromBody] RegisterDto registerDto)
        {
            // KH√îNG C·∫¶N try-catch. Logic th√†nh c√¥ng ƒë∆∞·ª£c gi·ªØ l·∫°i.
            var ip = HttpContext.Connection.RemoteIpAddress?.ToString() ?? "unknown";
            var result = await _authService.RegisterAsync(registerDto, ip);

            if (!string.IsNullOrEmpty(result.RefreshToken))
                SetRefreshCookie(result.RefreshToken);

            // Th∆∞·ªùng s·ª≠ d·ª•ng Created (201) cho ƒëƒÉng k√Ω th√†nh c√¥ng
            return CreatedAtAction(nameof(Login), new { email = registerDto.Email },
                ApiResponse<AuthDto>.Created(result, "ƒêƒÉng k√Ω th√†nh c√¥ng"));
        }

        // ============================
        // REFRESH TOKEN
        // ============================
        [HttpPost("refresh-token")]
        public async Task<IActionResult> RefreshToken()
        {
            var refreshToken = Request.Cookies["refreshToken"];

            // ƒê√¢y l√† ki·ªÉm tra c∆° b·∫£n, kh√¥ng ph·∫£i l·ªói nghi·ªáp v·ª• t·ª´ Service
            if (string.IsNullOrEmpty(refreshToken))
                return Unauthorized(ApiResponse<string>.Fail("Refresh token missing"));

            // KH√îNG C·∫¶N try-catch. N·∫øu token kh√¥ng h·ª£p l·ªá (Invalid token/Expired), 
            // AuthService s·∫Ω n√©m UnauthorizedException v√† Middleware s·∫Ω b·∫Øt.
            var ip = HttpContext.Connection.RemoteIpAddress?.ToString() ?? "unknown";
            var result = await _authService.RefreshTokenAsync(refreshToken, ip);

            if (!string.IsNullOrEmpty(result.RefreshToken))
                SetRefreshCookie(result.RefreshToken);

            return Ok(ApiResponse<AuthDto>.Success(result, "L√†m m·ªõi token th√†nh c√¥ng"));
        }

        // ============================
        // LOGOUT
        // ============================
        // Trong AuthController.cs

        // ============================
        // LOGOUT
        // ============================
        [Authorize]
        [HttpPost("log-out")]
        public async Task<IActionResult> Logout()
        {
            var refreshToken = Request.Cookies["refreshToken"];

            // 1. Ch·ªâ th·ª±c hi·ªán Revoke n·∫øu Refresh Token t·ªìn t·∫°i trong Cookie
            if (!string.IsNullOrEmpty(refreshToken))
            {
                var ip = HttpContext.Connection.RemoteIpAddress?.ToString() ?? "unknown";

                // B·∫Øt l·ªói khi token ƒë√£ b·ªã v√¥ hi·ªáu h√≥a
                try
                {
                    // C·ªë g·∫Øng thu h·ªìi token trong DB.
                    await _authService.RevokeTokenAsync(refreshToken, ip);
                }
                catch (UnauthorizedException)
                {
                    // ‚úÖ X·ª¨ L√ù L·ªñI IM L·∫∂NG: N·∫øu AuthService n√©m UnauthorizedException 
                    // (v√¨ token kh√¥ng h·ª£p l·ªá, h·∫øt h·∫°n, ho·∫∑c ƒë√£ b·ªã thu h·ªìi), 
                    // ch√∫ng ta b·ªè qua l·ªói n√†y v√† ti·∫øp t·ª•c x√≥a cookie.
                    // M·ª•c ti√™u c·ªßa Logout ƒë√£ ƒë·∫°t ƒë∆∞·ª£c: phi√™n ng∆∞·ªùi d√πng k·∫øt th√∫c.
                }
                // C√°c l·ªói kh√°c (nh∆∞ l·ªói DB, Exception chung) v·∫´n s·∫Ω ƒë∆∞·ª£c Global Handler b·∫Øt
            }

            // 2. Lu√¥n x√≥a cookie kh·ªèi tr√¨nh duy·ªát (B∆∞·ªõc quan tr·ªçng nh·∫•t)
            Response.Cookies.Delete("refreshToken");

            // ‚úÖ Tr·∫£ v·ªÅ 200 OK
            return Ok(ApiResponse<string>.Success("ƒêƒÉng xu·∫•t th√†nh c√¥ng"));
        }

        // ============================
        // Helper: Set Refresh Cookie (Gi·ªØ nguy√™n)
        // ============================
        private void SetRefreshCookie(string refreshToken)
        {
            var cookieOptions = new CookieOptions
            {
                HttpOnly = true,
                SameSite = SameSiteMode.Lax, // üëà ƒë·ªïi None ‚Üí Lax
                Secure = false, // t·∫°m th·ªùi cho localhost, production th√¨ ph·∫£i true
                Expires = DateTime.UtcNow.AddDays(30)
            };
            Response.Cookies.Append("refreshToken", refreshToken, cookieOptions);
        }
    }
}