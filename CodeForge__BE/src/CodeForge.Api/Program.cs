using Microsoft.EntityFrameworkCore;
using CodeForge.Infrastructure;
using CodeForge.Infrastructure.Data;
using CodeForge.Core.Mappings;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using System.Text;
using CodeForge.Api.Middleware;
using System.Text.Json.Serialization;

namespace CodeForge
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var builder = WebApplication.CreateBuilder(args);

            // Add services
            builder.Services.AddControllers()
            // üëá D√≤ng n√†y gi√∫p tr√°nh v√≤ng l·∫∑p khi serialize entity c√≥ quan h·ªá
                .AddJsonOptions(options =>
                {
                    options.JsonSerializerOptions.ReferenceHandler = ReferenceHandler.IgnoreCycles;
                    options.JsonSerializerOptions.WriteIndented = true; // (t√πy ch·ªçn: in JSON ƒë·∫πp)
                });
            builder.Services.AddEndpointsApiExplorer();
            builder.Services.AddSwaggerGen();

            // ƒêƒÉng k√Ω DbContext
            builder.Services.AddDbContext<ApplicationDbContext>(options =>
                options.UseSqlServer(builder.Configuration.GetConnectionString("Default")));

            // AutoMapper
            builder.Services.AddAutoMapper(typeof(MappingProfile));


            // Register DI
            builder.Services.AddInfrastructure();

            // JWT Authentication
            builder.Services.AddAuthentication(options =>
            {
                options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            })
            .AddJwtBearer(options =>
            {
                options.TokenValidationParameters = new TokenValidationParameters
                {
                    ValidateIssuer = true,
                    ValidateAudience = true,
                    ValidateLifetime = true,
                    ValidateIssuerSigningKey = true,
                    ValidIssuer = builder.Configuration["Jwt:Issuer"],
                    ValidAudience = builder.Configuration["Jwt:Audience"],
                    IssuerSigningKey = new SymmetricSecurityKey(
                        Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"] ?? "default_secret_key"))
                };
            });

            builder.Services.AddAuthorization();

            // ‚úÖ C·∫•u h√¨nh CORS linh ho·∫°t
            var frontendUrl = builder.Configuration["FrontendUrl"] ?? "http://localhost:3000";
            builder.Services.AddCors(options =>
            {
                options.AddPolicy("AllowFrontend", policy =>
                {
                    policy.WithOrigins(frontendUrl)
                          .AllowAnyHeader()
                          .AllowAnyMethod()
                          .AllowCredentials(); // <- Quan tr·ªçng n·∫øu b·∫°n d√πng cookie/token trong header
                });
            });

            var app = builder.Build();
            // ƒêƒÇNG K√ù MIDDLEWARE X·ª¨ L√ù L·ªñI TO√ÄN C·ª§C ·ªû ƒê√ÇY!
            // V·ªã tr√≠ n√†y ƒë·∫£m b·∫£o n√≥ c√≥ th·ªÉ b·∫Øt ngo·∫°i l·ªá t·ª´ h·∫ßu h·∫øt c√°c ph·∫ßn sau ƒë√≥ c·ªßa pipeline.
            app.UseMiddleware<ExceptionHandlingMiddleware>();
            // ‚úÖ Th·ª© t·ª± middleware ƒë√∫ng
            if (app.Environment.IsDevelopment())
            {
                app.UseSwagger();
                app.UseSwaggerUI();
            }

            app.UseHttpsRedirection();

            app.UseCors("AllowFrontend"); // ‚ö°Ô∏è PH·∫¢I ƒë·∫∑t tr∆∞·ªõc Authentication

            // 1. K√≠ch ho·∫°t Authentication: ƒê·ªçc v√† x√°c minh token JWT
            app.UseAuthentication();

            // 2. K√≠ch ho·∫°t Authorization: √Åp d·ª•ng c√°c quy t·∫Øc b·∫£o v·ªá
            app.UseAuthorization();

            app.MapControllers();

            app.Run();
        }
    }
}
